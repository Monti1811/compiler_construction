; ModuleID = 'tests/compiler/ackermann.c4'
source_filename = "tests/compiler/ackermann.c4"

define i32 @ack(i32 %m, i32 %n) {
entry:
  %0 = alloca i32, align 4
  %1 = alloca i32, align 4
  store i32 %m, ptr %1, align 4
  store i32 %n, ptr %0, align 4
  br label %if-header

if-header:                                        ; preds = %entry
  %2 = load i32, ptr %1, align 4
  %if-condition = icmp eq i32 %2, 0
  br i1 %if-condition, label %if-consequence, label %if-alternative

if-consequence:                                   ; preds = %if-header
  %3 = load i32, ptr %0, align 4
  %4 = add i32 %3, 1
  ret i32 %4

if-alternative:                                   ; preds = %if-header
  br label %if-header1

if-end:                                           ; preds = %if-end5, %DEAD_BLOCK
  ret i32 0

DEAD_BLOCK:                                       ; No predecessors!
  br label %if-end

if-header1:                                       ; preds = %if-alternative
  %5 = load i32, ptr %1, align 4
  %6 = icmp slt i32 0, %5
  br i1 %6, label %and-consequence, label %and-end

and-consequence:                                  ; preds = %if-header1
  %7 = load i32, ptr %0, align 4
  %8 = icmp eq i32 %7, 0
  br label %and-end

and-end:                                          ; preds = %and-consequence, %if-header1
  %9 = phi i1 [ %6, %if-header1 ], [ %8, %and-consequence ]
  %10 = zext i1 %9 to i32
  %if-condition2 = icmp ne i32 %10, 0
  br i1 %if-condition2, label %if-consequence3, label %if-alternative4

if-consequence3:                                  ; preds = %and-end
  %11 = load i32, ptr %1, align 4
  %12 = sub i32 %11, 1
  %13 = call i32 @ack(i32 %12, i32 1)
  ret i32 %13

if-alternative4:                                  ; preds = %and-end
  br label %if-header7

if-end5:                                          ; preds = %if-end12, %DEAD_BLOCK6
  br label %if-end

DEAD_BLOCK6:                                      ; No predecessors!
  br label %if-end5

if-header7:                                       ; preds = %if-alternative4
  %14 = load i32, ptr %1, align 4
  %15 = icmp slt i32 0, %14
  br i1 %15, label %and-consequence8, label %and-end9

and-consequence8:                                 ; preds = %if-header7
  %16 = load i32, ptr %0, align 4
  %17 = icmp slt i32 0, %16
  br label %and-end9

and-end9:                                         ; preds = %and-consequence8, %if-header7
  %18 = phi i1 [ %15, %if-header7 ], [ %17, %and-consequence8 ]
  %19 = zext i1 %18 to i32
  %if-condition10 = icmp ne i32 %19, 0
  br i1 %if-condition10, label %if-consequence11, label %if-end12

if-consequence11:                                 ; preds = %and-end9
  %20 = load i32, ptr %1, align 4
  %21 = sub i32 %20, 1
  %22 = load i32, ptr %1, align 4
  %23 = load i32, ptr %0, align 4
  %24 = sub i32 %23, 1
  %25 = call i32 @ack(i32 %22, i32 %24)
  %26 = call i32 @ack(i32 %21, i32 %25)
  ret i32 %26

if-end12:                                         ; preds = %DEAD_BLOCK13, %and-end9
  br label %if-end5

DEAD_BLOCK13:                                     ; No predecessors!
  br label %if-end12
}

define i32 @main() {
entry:
  %0 = alloca i32, align 4
  %1 = call i32 @ack(i32 3, i32 4)
  store i32 %1, ptr %0, align 4
  %2 = load i32, ptr %0, align 4
  ret i32 %2

DEAD_BLOCK:                                       ; No predecessors!
  ret i32 0
}
