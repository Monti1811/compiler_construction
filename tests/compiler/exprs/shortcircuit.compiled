; ModuleID = 'tests/compiler/exprs/shortcircuit.c4'
source_filename = "tests/compiler/exprs/shortcircuit.c4"

define i32 @main() {
entry:
  %0 = alloca i32, align 4
  %1 = alloca i32, align 4
  store i32 1, ptr %1, align 4
  %2 = load i32, ptr %1, align 4
  %3 = icmp ne i32 0, %2
  br i1 %3, label %or-end, label %or-consequence

or-consequence:                                   ; preds = %entry
  %4 = load i32, ptr %1, align 4
  %5 = add i32 %4, 2
  store i32 %5, ptr %1, align 4
  %6 = icmp ne i32 0, %5
  br label %or-end

or-end:                                           ; preds = %or-consequence, %entry
  %7 = phi i1 [ %3, %entry ], [ %6, %or-consequence ]
  %8 = zext i1 %7 to i32
  store i32 %8, ptr %0, align 4
  br i1 false, label %and-consequence, label %and-end

and-consequence:                                  ; preds = %or-end
  %9 = load i32, ptr %1, align 4
  %10 = add i32 %9, 4
  store i32 %10, ptr %1, align 4
  %11 = icmp ne i32 0, %10
  br label %and-end

and-end:                                          ; preds = %and-consequence, %or-end
  %12 = phi i1 [ false, %or-end ], [ %11, %and-consequence ]
  %13 = zext i1 %12 to i32
  store i32 %13, ptr %0, align 4
  br i1 false, label %ternary-consequence, label %ternary-alternative

ternary-consequence:                              ; preds = %and-end
  %14 = load i32, ptr %1, align 4
  %15 = add i32 %14, 8
  store i32 %15, ptr %1, align 4
  br label %ternary-end

ternary-alternative:                              ; preds = %and-end
  br label %ternary-end

ternary-end:                                      ; preds = %ternary-alternative, %ternary-consequence
  %16 = phi i32 [ %15, %ternary-consequence ], [ 0, %ternary-alternative ]
  store i32 %16, ptr %0, align 4
  br i1 true, label %ternary-consequence1, label %ternary-alternative2

ternary-consequence1:                             ; preds = %ternary-end
  br label %ternary-end3

ternary-alternative2:                             ; preds = %ternary-end
  %17 = load i32, ptr %1, align 4
  %18 = add i32 %17, 16
  store i32 %18, ptr %1, align 4
  br label %ternary-end3

ternary-end3:                                     ; preds = %ternary-alternative2, %ternary-consequence1
  %19 = phi i32 [ 1, %ternary-consequence1 ], [ %18, %ternary-alternative2 ]
  store i32 %19, ptr %0, align 4
  %20 = load i32, ptr %1, align 4
  ret i32 %20

DEAD_BLOCK:                                       ; No predecessors!
  ret i32 0
}
