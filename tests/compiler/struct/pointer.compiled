; ModuleID = 'tests/compiler/struct/pointer.c4'
source_filename = "tests/compiler/struct/pointer.c4"

%struct.S = type { i32, i32, i32, ptr }
%struct.Z = type { i32 }

@GS = common global %struct.S zeroinitializer

define i32 @f(ptr %AZ) {
entry:
  %0 = alloca i32, align 4
  %1 = alloca ptr, align 8
  store ptr %AZ, ptr %1, align 8
  %2 = alloca %struct.S, align 8
  %3 = getelementptr inbounds %struct.S, ptr %2, i32 0, i32 2
  store i32 4, ptr %3, align 4
  %4 = getelementptr inbounds %struct.S, ptr %2, i32 0, i32 3
  %5 = load ptr, ptr %1, align 8
  store ptr %5, ptr %4, align 8
  %6 = getelementptr inbounds %struct.S, ptr %2, i32 0, i32 3
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds %struct.Z, ptr %7, i32 0, i32 0
  store i32 3, ptr %8, align 4
  %9 = load i32, ptr @GS, align 4
  %10 = load ptr, ptr %1, align 8
  %11 = getelementptr inbounds %struct.Z, ptr %10, i32 0, i32 0
  %12 = load i32, ptr %11, align 4
  %13 = add i32 %9, %12
  %14 = getelementptr inbounds %struct.S, ptr %2, i32 0, i32 2
  %15 = load i32, ptr %14, align 4
  %16 = add i32 %13, %15
  %17 = getelementptr inbounds %struct.S, ptr %2, i32 0, i32 3
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr inbounds %struct.Z, ptr %18, i32 0, i32 0
  %20 = load i32, ptr %19, align 4
  %21 = add i32 %16, %20
  store i32 %21, ptr %0, align 4
  %22 = load i32, ptr %0, align 4
  ret i32 %22

DEAD_BLOCK:                                       ; No predecessors!
  ret i32 0
}

define i32 @main() {
entry:
  %0 = alloca ptr, align 8
  %1 = alloca %struct.Z, align 8
  store ptr %1, ptr %0, align 8
  %2 = load ptr, ptr %0, align 8
  %3 = getelementptr inbounds %struct.Z, ptr %2, i32 0, i32 0
  store i32 3, ptr %3, align 4
  store i32 3, ptr @GS, align 4
  %4 = load ptr, ptr %0, align 8
  %5 = call i32 @f(ptr %4)
  ret i32 %5

DEAD_BLOCK:                                       ; No predecessors!
  ret i32 0
}